/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.yx.spark.trajectory;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Bucket extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Bucket\",\"namespace\":\"com.yx.spark.trajectory\",\"fields\":[{\"name\":\"bucketId\",\"type\":\"int\"},{\"name\":\"path\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int bucketId;
  @Deprecated public CharSequence path;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Bucket() {}

  /**
   * All-args constructor.
   */
  public Bucket(Integer bucketId, CharSequence path) {
    this.bucketId = bucketId;
    this.path = path;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return bucketId;
    case 1: return path;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: bucketId = (Integer)value$; break;
    case 1: path = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'bucketId' field.
   */
  public Integer getBucketId() {
    return bucketId;
  }

  /**
   * Sets the value of the 'bucketId' field.
   * @param value the value to set.
   */
  public void setBucketId(Integer value) {
    this.bucketId = value;
  }

  /**
   * Gets the value of the 'path' field.
   */
  public CharSequence getPath() {
    return path;
  }

  /**
   * Sets the value of the 'path' field.
   * @param value the value to set.
   */
  public void setPath(CharSequence value) {
    this.path = value;
  }

  /** Creates a new Bucket RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }

  /** Creates a new Bucket RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /** Creates a new Bucket RecordBuilder by copying an existing Bucket instance */
  public static Builder newBuilder(Bucket other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Bucket instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Bucket>
    implements org.apache.avro.data.RecordBuilder<Bucket> {

    private int bucketId;
    private CharSequence path;

    /** Creates a new Builder */
    private Builder() {
      super(Bucket.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bucketId)) {
        this.bucketId = data().deepCopy(fields()[0].schema(), other.bucketId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.path)) {
        this.path = data().deepCopy(fields()[1].schema(), other.path);
        fieldSetFlags()[1] = true;
      }
    }

    /** Creates a Builder by copying an existing Bucket instance */
    private Builder(Bucket other) {
            super(Bucket.SCHEMA$);
      if (isValidValue(fields()[0], other.bucketId)) {
        this.bucketId = data().deepCopy(fields()[0].schema(), other.bucketId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.path)) {
        this.path = data().deepCopy(fields()[1].schema(), other.path);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'bucketId' field */
    public Integer getBucketId() {
      return bucketId;
    }

    /** Sets the value of the 'bucketId' field */
    public Builder setBucketId(int value) {
      validate(fields()[0], value);
      this.bucketId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'bucketId' field has been set */
    public boolean hasBucketId() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'bucketId' field */
    public Builder clearBucketId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'path' field */
    public CharSequence getPath() {
      return path;
    }

    /** Sets the value of the 'path' field */
    public Builder setPath(CharSequence value) {
      validate(fields()[1], value);
      this.path = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'path' field has been set */
    public boolean hasPath() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'path' field */
    public Builder clearPath() {
      path = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Bucket build() {
      try {
        Bucket record = new Bucket();
        record.bucketId = fieldSetFlags()[0] ? this.bucketId : (Integer) defaultValue(fields()[0]);
        record.path = fieldSetFlags()[1] ? this.path : (CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
