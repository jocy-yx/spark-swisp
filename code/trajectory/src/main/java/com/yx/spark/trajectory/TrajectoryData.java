/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.yx.spark.trajectory;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TrajectoryData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TrajectoryData\",\"namespace\":\"com.yx.spark.trajectory\",\"fields\":[{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"date_time\",\"type\":\"string\"},{\"name\":\"connection_type\",\"type\":\"string\"},{\"name\":\"lon\",\"type\":\"string\"},{\"name\":\"lat\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence phone;
  @Deprecated public CharSequence date_time;
  @Deprecated public CharSequence connection_type;
  @Deprecated public CharSequence lon;
  @Deprecated public CharSequence lat;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TrajectoryData() {}

  /**
   * All-args constructor.
   */
  public TrajectoryData(CharSequence phone, CharSequence date_time, CharSequence connection_type, CharSequence lon, CharSequence lat) {
    this.phone = phone;
    this.date_time = date_time;
    this.connection_type = connection_type;
    this.lon = lon;
    this.lat = lat;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return phone;
    case 1: return date_time;
    case 2: return connection_type;
    case 3: return lon;
    case 4: return lat;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: phone = (CharSequence)value$; break;
    case 1: date_time = (CharSequence)value$; break;
    case 2: connection_type = (CharSequence)value$; break;
    case 3: lon = (CharSequence)value$; break;
    case 4: lat = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'phone' field.
   */
  public CharSequence getPhone() {
    return phone;
  }

  /**
   * Sets the value of the 'phone' field.
   * @param value the value to set.
   */
  public void setPhone(CharSequence value) {
    this.phone = value;
  }

  /**
   * Gets the value of the 'date_time' field.
   */
  public CharSequence getDateTime() {
    return date_time;
  }

  /**
   * Sets the value of the 'date_time' field.
   * @param value the value to set.
   */
  public void setDateTime(CharSequence value) {
    this.date_time = value;
  }

  /**
   * Gets the value of the 'connection_type' field.
   */
  public CharSequence getConnectionType() {
    return connection_type;
  }

  /**
   * Sets the value of the 'connection_type' field.
   * @param value the value to set.
   */
  public void setConnectionType(CharSequence value) {
    this.connection_type = value;
  }

  /**
   * Gets the value of the 'lon' field.
   */
  public CharSequence getLon() {
    return lon;
  }

  /**
   * Sets the value of the 'lon' field.
   * @param value the value to set.
   */
  public void setLon(CharSequence value) {
    this.lon = value;
  }

  /**
   * Gets the value of the 'lat' field.
   */
  public CharSequence getLat() {
    return lat;
  }

  /**
   * Sets the value of the 'lat' field.
   * @param value the value to set.
   */
  public void setLat(CharSequence value) {
    this.lat = value;
  }

  /** Creates a new TrajectoryData RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new TrajectoryData RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new TrajectoryData RecordBuilder by copying an existing TrajectoryData instance */
  public static Builder newBuilder(TrajectoryData other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for TrajectoryData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TrajectoryData>
    implements org.apache.avro.data.RecordBuilder<TrajectoryData> {

    private CharSequence phone;
    private CharSequence date_time;
    private CharSequence connection_type;
    private CharSequence lon;
    private CharSequence lat;

    /** Creates a new Builder */
    private Builder() {
      super(TrajectoryData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.phone)) {
        this.phone = data().deepCopy(fields()[0].schema(), other.phone);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date_time)) {
        this.date_time = data().deepCopy(fields()[1].schema(), other.date_time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.connection_type)) {
        this.connection_type = data().deepCopy(fields()[2].schema(), other.connection_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lon)) {
        this.lon = data().deepCopy(fields()[3].schema(), other.lon);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lat)) {
        this.lat = data().deepCopy(fields()[4].schema(), other.lat);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TrajectoryData instance */
    private Builder(TrajectoryData other) {
            super(TrajectoryData.SCHEMA$);
      if (isValidValue(fields()[0], other.phone)) {
        this.phone = data().deepCopy(fields()[0].schema(), other.phone);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date_time)) {
        this.date_time = data().deepCopy(fields()[1].schema(), other.date_time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.connection_type)) {
        this.connection_type = data().deepCopy(fields()[2].schema(), other.connection_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lon)) {
        this.lon = data().deepCopy(fields()[3].schema(), other.lon);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lat)) {
        this.lat = data().deepCopy(fields()[4].schema(), other.lat);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'phone' field */
    public CharSequence getPhone() {
      return phone;
    }
    
    /** Sets the value of the 'phone' field */
    public Builder setPhone(CharSequence value) {
      validate(fields()[0], value);
      this.phone = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'phone' field has been set */
    public boolean hasPhone() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'phone' field */
    public Builder clearPhone() {
      phone = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'date_time' field */
    public CharSequence getDateTime() {
      return date_time;
    }
    
    /** Sets the value of the 'date_time' field */
    public Builder setDateTime(CharSequence value) {
      validate(fields()[1], value);
      this.date_time = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'date_time' field has been set */
    public boolean hasDateTime() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'date_time' field */
    public Builder clearDateTime() {
      date_time = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'connection_type' field */
    public CharSequence getConnectionType() {
      return connection_type;
    }
    
    /** Sets the value of the 'connection_type' field */
    public Builder setConnectionType(CharSequence value) {
      validate(fields()[2], value);
      this.connection_type = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'connection_type' field has been set */
    public boolean hasConnectionType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'connection_type' field */
    public Builder clearConnectionType() {
      connection_type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'lon' field */
    public CharSequence getLon() {
      return lon;
    }
    
    /** Sets the value of the 'lon' field */
    public Builder setLon(CharSequence value) {
      validate(fields()[3], value);
      this.lon = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'lon' field has been set */
    public boolean hasLon() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'lon' field */
    public Builder clearLon() {
      lon = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'lat' field */
    public CharSequence getLat() {
      return lat;
    }
    
    /** Sets the value of the 'lat' field */
    public Builder setLat(CharSequence value) {
      validate(fields()[4], value);
      this.lat = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'lat' field has been set */
    public boolean hasLat() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'lat' field */
    public Builder clearLat() {
      lat = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public TrajectoryData build() {
      try {
        TrajectoryData record = new TrajectoryData();
        record.phone = fieldSetFlags()[0] ? this.phone : (CharSequence) defaultValue(fields()[0]);
        record.date_time = fieldSetFlags()[1] ? this.date_time : (CharSequence) defaultValue(fields()[1]);
        record.connection_type = fieldSetFlags()[2] ? this.connection_type : (CharSequence) defaultValue(fields()[2]);
        record.lon = fieldSetFlags()[3] ? this.lon : (CharSequence) defaultValue(fields()[3]);
        record.lat = fieldSetFlags()[4] ? this.lat : (CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
